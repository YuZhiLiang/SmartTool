package com.zhiliang.smarttool.java;import org.apache.poi.ss.usermodel.Cell;import org.apache.poi.ss.usermodel.CellType;import org.apache.poi.ss.usermodel.Row;import org.apache.poi.ss.usermodel.Sheet;import org.apache.poi.ss.usermodel.Workbook;import org.apache.poi.ss.usermodel.WorkbookFactory;import org.w3c.dom.Document;import org.w3c.dom.Element;import org.w3c.dom.NamedNodeMap;import org.w3c.dom.Node;import org.w3c.dom.NodeList;import java.io.File;import java.io.IOException;import java.util.ArrayList;import java.util.HashMap;import java.util.Map;import javax.xml.parsers.DocumentBuilder;import javax.xml.parsers.DocumentBuilderFactory;import javax.xml.transform.OutputKeys;import javax.xml.transform.Transformer;import javax.xml.transform.TransformerFactory;import javax.xml.transform.dom.DOMSource;import javax.xml.transform.stream.StreamResult;/** * Copyright (C) 2019, UBTECH Robotics * Description 将String和StringArray文件导出为xml * XSSFWorkbookFactory * * @author YuZhiLiang * @version 1.0 * 26/12/2019, YuZhiLiang, Create file */public class XmlConver {    private static String sProjectName = "项目名";    private static DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();    private static ArrayList<String> sTargetsPaths = new ArrayList<>();//输出文件路径    private static HashMap<String, Document> sTargetsDoms = new HashMap<>();//输出文件    private static String sSourceExcelPath = "";//输入Excel文件    //    private static HashMap<String, Object> sSourceExcelSheet = new HashMap<>();//输入Excel文件Sheet表    private static ArrayList<Xmlt> sSourceExcelSheet = new ArrayList<>();//输入Excel文件Sheet表    private static String sTipPath = "";//异常文件    private static Document sTipDom;    private static Element sTipDomRoot;    public static void main(String[] args) {        //设值        sProjectName = "CruzrWorkMode";        sSourceExcelPath = "F:\\japaneset\\翻译资料-郁智良(1).xlsx";        readExcelPoi();        sTipPath = "F:\\japaneset\\tips.xml";        sTargetsPaths.add("F:\\japaneset\\CruzrWorkMode\\arrays.xml");        sTargetsPaths.add("F:\\japaneset\\CruzrWorkMode\\strings.xml");        sTargetsPaths.add("F:\\japaneset\\CruzrWorkMode\\skill_cmd.xml");        //生成提示文件        genTipDom();        //获取目标文件        for (String path : sTargetsPaths) {            Document document = genDom(path);            if (document != null) {                sTargetsDoms.put(path, document);            }        }        //处理String文件        for (Document value : sTargetsDoms.values()) {//目标文件循环            NodeList targetStringDomStringList = value.getElementsByTagName("string");//目标文件的StringNodeList            for (int i = 0; i < targetStringDomStringList.getLength(); i++) {//目标文件的StringNodeList循环，处理单个String                Node item = targetStringDomStringList.item(i);                if (item instanceof Element) {                    //获取id                    NamedNodeMap attributes = item.getAttributes();                    Node name = attributes.getNamedItem("name");                    String id = name.getNodeValue();                    String japanese = pickStringAboutId(id);                    if (japanese == null) {                        log("string " + id + " 没有找到目标翻译");                        Element string = sTipDom.createElement("string");                        string.setAttribute("name", id);                        string.setAttribute("tip", "没有找到目标翻译");                        string.setTextContent(name.getTextContent());                        sTipDomRoot.appendChild(string);                    } else {                        item.setTextContent(japanese);                        removeStringXmlt(id);                        log("string " + id + " 设置为：" + japanese);                    }                }            }        }        //处理Array文件        for (Document value : sTargetsDoms.values()) {            NodeList targetArrayDomStringList = value.getElementsByTagName("string-array");            for (int i = 0; i < targetArrayDomStringList.getLength(); i++) {                Node item = targetArrayDomStringList.item(i);                if (item instanceof Element) {                    Node name = item.getAttributes().getNamedItem("name");                    String id = name.getNodeValue();                    ArrayList<String> arrays = pickStringArrayAboutId(id);                    if (arrays == null || arrays.isEmpty()) {                        log("array: " + id + " 没有找到目标翻译");                        Element element = sTipDom.createElement("string-array");                        element.setAttribute("name", id);                        element.setAttribute("tip", "没有找到目标翻译");                        sTipDomRoot.appendChild(element);                    } else {                        NodeList childNodes = item.getChildNodes();//获取该id的array下的item                        for (int i1 = 0; i1 < childNodes.getLength(); i1++) {//删除该id的array下的原item                            Node child = childNodes.item(i1);                            if (child instanceof Element) {                                item.removeChild(child);                            }                        }                        for (String string : arrays) {                            Element item1 = value.createElement("item");                            item1.setTextContent(string);                            item.appendChild(item1);                            log("array " + id + " 添加：" + string);                        }                        removeArrayXmlt(id);                    }                }            }        }        for (Xmlt xmlt : sSourceExcelSheet) {            if (xmlt.type.equals("string")) {                Element string = sTipDom.createElement("string");                string.setAttribute("name", xmlt.id);                string.setAttribute("tip", "没有找到目标翻译源");                string.setTextContent(xmlt.mString);                sTipDomRoot.appendChild(string);            } else {                Element array = sTipDom.createElement("string-array");                array.setAttribute("name", xmlt.id);                array.setAttribute("tip", "没有找到目标翻译源");                for (String s : xmlt.mStrings) {                    Element item = sTipDom.createElement("item");                    item.setTextContent(s);                    array.appendChild(item);                }                sTipDomRoot.appendChild(array);            }        }        // 创建TransformerFactory对象        TransformerFactory tff = TransformerFactory.newInstance();        // 创建 Transformer对象        Transformer tf = null;        try {            tf = tff.newTransformer();            // 输出内容是否使用换行            tf.setOutputProperty(OutputKeys.INDENT, "yes");            // 创建xml文件并写入内容            for (Map.Entry<String, Document> documentEntry : sTargetsDoms.entrySet()) {                tf.transform(new DOMSource(documentEntry.getValue()), new StreamResult(new File(documentEntry.getKey().replace(".xml", "t.xml"))));            }            tf.transform(new DOMSource(sTipDom), new StreamResult(new File(sTipPath.replace(".xml", "t.xml"))));        } catch (Exception e) {            log("输出文件失败");            e.printStackTrace();        }        log("翻译文件设置完毕");    }    /*private static void readExcelJxl() {        File xlsFile = new File(sSourceExcelPath);        // 获得工作簿对象        Workbook workbook = null;        try {            workbook = Workbook.getWorkbook(xlsFile);            // 获得所有工作表            Sheet[] sheets = workbook.getSheets();            // 遍历工作表            if (sheets != null) {                for (Sheet sheet : sheets) {                    if (sheet.getName().equals(sProjectName)) {                        log("获得了：" + sProjectName + "工作表");                        // 获得行数                        int rows = sheet.getRows();                        // 获得列数                        int cols = sheet.getColumns();                        // 读取数据                        for (int row = 0; row < rows; row++) {                            for (int col = 0; col < cols; col++) {                                System.out.printf("%10s", sheet.getCell(col, row)                                        .getContents());                            }                            String id = sheet.getCell(1, row).getContents();                            String chinese = sheet.getCell(3, row).getContents();                            String japanese = sheet.getCell(5, row).getContents();                            System.out.println("id:" + id + " 中文：" + chinese + " 日文：" + japanese);                        }                    }                }            }        } catch (IOException | BiffException e) {            e.printStackTrace();        } finally {            if (workbook != null) {                workbook.close();            }        }        if (workbook != null) {            workbook.close();        }    }*/    private static void readExcelPoi() {        File xlsFile = new File(sSourceExcelPath);        // 获得工作簿        Workbook workbook = null;        try {            workbook = WorkbookFactory.create(xlsFile);            // 获得工作表个数            int sheetCount = workbook.getNumberOfSheets();            // 遍历工作表            for (int i = 0; i < sheetCount; i++) {                Sheet sheet = workbook.getSheetAt(i);                if (sheet.getSheetName().equals(sProjectName)) {                    // 获得行数                    int rows = sheet.getLastRowNum() + 1;                    // 获得列数，先获得一行，再得到改行列数                    Row tmp = sheet.getRow(0);                    if (tmp == null) {                        log("获取到的列数为null");                        continue;                    }                    int cols = tmp.getPhysicalNumberOfCells();                    // 读取数据                    for (int row = 1; row < rows; row++) {                        Row r = sheet.getRow(row);                        /*for (int col = 0; col < cols; col++) {                            Cell cell = r.getCell(col);                            cell.setCellType(CellType.STRING);                            System.out.printf("%10s", r.getCell(col).getStringCellValue());                        }*/                        if (r == null) break;                        Cell idCell = r.getCell(0);                        if (idCell == null) break;                        idCell.setCellType(CellType.STRING);                        String id = idCell.getStringCellValue();                        Cell typeCell = r.getCell(1);                        if (typeCell == null) break;                        typeCell.setCellType(CellType.STRING);                        String type = typeCell.getStringCellValue();                        Cell japaneseCell = r.getCell(4);                        if (japaneseCell != null) {                            japaneseCell.setCellType(CellType.STRING);                            String japanese = japaneseCell.getStringCellValue();                            if (type.equals("string")) {                                if (pickStringAboutId(id) != null) {                                    log("string翻译" + id + "重复存在！");                                    System.exit(22);                                } else {                                    Xmlt xmlt = new Xmlt();                                    xmlt.type = "string";                                    xmlt.id = id;                                    xmlt.mString = japanese;                                    sSourceExcelSheet.add(xmlt);                                }                            } else {                                ArrayList<String> arrays;                                ArrayList<String> strings = pickStringArrayAboutId(id);                                if (strings == null) {                                    arrays = new ArrayList<>();                                    Xmlt xmlt = new Xmlt();                                    xmlt.id = id;                                    xmlt.type = "string-array";                                    xmlt.mStrings = arrays;                                    sSourceExcelSheet.add(xmlt);                                } else {                                    arrays = strings;                                }                                if (arrays.contains(japanese)) {                                    log("存入日文翻译时该日文已在集合中存在");                                } else {                                    arrays.add(japanese);                                }                            }                        }                        log("读取了" + (row - 1) + "行");//                        System.out.println("id:" + id + " type:" + type + " japanese:" + japanese);                    }                }            }        } catch (IOException e) {            e.printStackTrace();        } finally {            try {                if (workbook != null) {                    workbook.close();                }            } catch (IOException e) {                e.printStackTrace();            }        }        try {            if (workbook != null) {                workbook.close();            }        } catch (IOException e) {            e.printStackTrace();        }    }    //传入的nodeList中找出id相同的Node    private static ArrayList<Node> pickNodeAboutName(String id, NodeList nodeList) {        ArrayList<Node> nodes = new ArrayList<>();        for (int i = 0; i < nodeList.getLength(); i++) {            Node item = nodeList.item(i);            NamedNodeMap attributes = item.getAttributes();            Node name = attributes.getNamedItem("name");            String id2 = name.getNodeValue();            if (id.equals(id2)) {                nodes.add(item);            }        }        return nodes;    }    private static String pickStringAboutId(String id) {        for (Xmlt xmlt : sSourceExcelSheet) {            if (xmlt.type.equals("string") && xmlt.id.equals(id)) {                return xmlt.mString;            }        }        return null;    }    private static void removeStringXmlt(String id) {        Xmlt xml = null;        for (Xmlt xmlt : sSourceExcelSheet) {            if (xmlt.type.equals("string") && xmlt.id.equals(id)) {                xml = xmlt;                break;            }        }        if (xml != null) sSourceExcelSheet.remove(xml);    }    private static ArrayList<String> pickStringArrayAboutId(String id) {        for (Xmlt xmlt : sSourceExcelSheet) {            if (xmlt.type.equals("string-array") && xmlt.id.equals(id)) {                return xmlt.mStrings;            }        }        return null;    }    private static void removeArrayXmlt(String id) {        Xmlt xml = null;        for (Xmlt xmlt : sSourceExcelSheet) {            if (xmlt.type.equals("string-array") && xmlt.id.equals(id)) {                xml = xmlt;                break;            }        }        if (xml != null) sSourceExcelSheet.remove(xml);    }    private static void pickArray(Document outDom, NodeList cnStringDomArrayList, HashMap<String, Element> hashMap, String language) {        for (int i = 0; i < cnStringDomArrayList.getLength(); i++) {            Node item = cnStringDomArrayList.item(i);            NamedNodeMap attributes = item.getAttributes();            Node name = attributes.getNamedItem("name");            String id = name.getNodeValue();            Element element = hashMap.get(id);            if (element == null) {                element = outDom.createElement("string-array");                element.setAttribute("type", "string-array");                element.setAttribute("id", id);                hashMap.put(id, element);            }            NodeList childNodes = item.getChildNodes();            ArrayList<Element> elements = new ArrayList<>();            for (int i1 = 0; i1 < childNodes.getLength(); i1++) {                Node item1 = childNodes.item(i1);                if (item1 instanceof Element) {                    elements.add((Element) item1);                }            }            for (Element element1 : elements) {                Element chineseElement = outDom.createElement(language);                String content = element1.getTextContent();//                log("i1 = " + i1 + " launguage:" + language + " id:" + id + " conent:" + content);                chineseElement.setTextContent(content);                element.appendChild(chineseElement);            }        }    }    private static void pickString(Document outDom, Element resource, NodeList cnStringDomStringList, NodeList enStringDomStringList) {        HashMap<String, Element> hashMap = new HashMap<>();        for (int i = 0; i < cnStringDomStringList.getLength(); i++) {            Node item = cnStringDomStringList.item(i);            NamedNodeMap attributes = item.getAttributes();            Node name = attributes.getNamedItem("name");            String id = name.getNodeValue();            String content = item.getTextContent();//                log("id:" + id + " content:" + content);            Element stringArray = outDom.createElement("string-array");            stringArray.setAttribute("id", id);            stringArray.setAttribute("type", "string");            Element chineseElement = outDom.createElement("中文");            chineseElement.setTextContent(content);            stringArray.appendChild(chineseElement);            hashMap.put(id, stringArray);        }        /*Node stringNodeForNameValue = null;        if (enStringDomStringList != null) {            stringNodeForNameValue = getStringNodeForNameValue(enStringDomStringList, id);            if (stringNodeForNameValue != null) {                Element englishElement = outDom.createElement("英文");                englishElement.setTextContent(stringNodeForNameValue.getTextContent());                stringArray.appendChild(englishElement);            }        }        resource.appendChild(stringArray);*/        if (enStringDomStringList != null) {            for (int i = 0; i < enStringDomStringList.getLength(); i++) {                Node item = enStringDomStringList.item(i);                NamedNodeMap attributes = item.getAttributes();                Node name = attributes.getNamedItem("name");                String id = name.getNodeValue();                Element stringArray = hashMap.get(id);                if (stringArray == null) {                    stringArray = outDom.createElement("string-array");                    stringArray.setAttribute("id", id);                    stringArray.setAttribute("type", "string");                    hashMap.put(id, stringArray);                }                Element englishElement = outDom.createElement("英文");                englishElement.setTextContent(item.getTextContent());                stringArray.appendChild(englishElement);            }        }        for (Element value : hashMap.values()) {            resource.appendChild(value);        }    }    public static Node getStringNodeForNameValue(NodeList enStringDomStringList, String sourceId) {        for (int i = 0; i < enStringDomStringList.getLength(); i++) {            Node item = enStringDomStringList.item(i);            NamedNodeMap attributes = item.getAttributes();            Node name = attributes.getNamedItem("name");            String id = name.getNodeValue();            if (sourceId.equals(id)) {                return item;            }        }        return null;    }    private static Document genTipDom() {        DocumentBuilder db = null;        try {            db = factory.newDocumentBuilder();            if (db != null) {                sTipDom = db.newDocument();                // 不显示standalone="no"                sTipDom.setXmlStandalone(true);                sTipDomRoot = sTipDom.createElement("resource");                sTipDom.appendChild(sTipDomRoot);                return sTipDom;            } else {                log("factory.newDocumentBuilder() 返回null");            }        } catch (Exception e) {            log("生成输出文件出错");            e.printStackTrace();        }        return null;    }    public static Document genDom(String path) {        if (path == null || path.isEmpty()) {            return null;        }        try {            DocumentBuilder builder = factory.newDocumentBuilder();            return builder.parse(path);        } catch (Exception e) {            log("生成dom出现错误");            e.printStackTrace();        }        return null;    }    private static void log(String str) {        System.out.println(str);    }}